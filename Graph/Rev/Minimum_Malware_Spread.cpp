class Solution {
public:
int Get(vector<int> &parent,int a){
    return parent[a]=((parent[a]==a)?a:Get(parent,parent[a]));
}
void Union(vector<int> &parent,vector<int> &rank,int a,int b){
     int lx=Get(parent,a);
    int ly=Get(parent,b);
    
    if(lx!=ly){
        
        if(rank[lx]>rank[ly]){
            rank[lx]+=rank[ly];
            parent[ly]=lx;
        }
        
        else{
            rank[ly]+=rank[lx];
            parent[lx]=ly;
        }
        
    }
}
int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
int n=graph.size();
int m=graph[0].size();
vector<int> parent(305);
vector<int> rank(305);
for(int i=0;i<n;i++){
	parent[i]=i;
	rank[i]=1;
}
for(int i=0;i<n;i++){
	for(int j=0;j<n;j++){
		if(graph[i][j]==1 && i!=j){
            int x=Get(parent,i);
            int y=Get(parent,j);
			Union(parent,rank,x,y);
		}
	}
}
//now we need to store infected node in each coponent
vector<int>infected(n,0);
for(auto &el:initial){
	int par=Get(parent,el);
	infected[par]++;
}
int res=n+1;
int maxSize=-1;
 for(int e:initial){
        int p=Get(parent,e);
        if(infected[p]==1 && rank[p]>=maxSize){
            if(rank[p]==maxSize){
                res=min(res,e);
            }
            else{
                res=e;
            }
            maxSize=rank[p];
        }
    }    
    if(res==n+1){
        
        for(int e:initial){
            res=min(res,e);
        }
        
    }
    
    return res;
    
}
};